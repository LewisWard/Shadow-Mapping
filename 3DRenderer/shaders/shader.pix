// Author  : Lewis Ward
// Program : 3D Renderer
// Date    : 10/10/2016
#version 330

uniform sampler2D texture;
uniform sampler2DShadow shadowMap;
uniform mat3 normalMatrix;
uniform mat4 modelMatrix;

in vec2 vs_uv;
in vec3 vs_fragpos;
in vec3 vs_normal;
in vec4 vs_shadowCoord;
out vec4 output_colour;

uniform struct Light
{
  vec3 position;
  vec3 colour;

} light; 

void main()
{
  vec4 diffuse = texture2D(texture, vs_uv);
  vec3 normal = normalize(normalMatrix * vs_normal);

  vec3 surfaceToLight = light.position - vs_fragpos;

  float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
  brightness = clamp(brightness, 0, 1);

  // in shadow or not
  float visibility = 1.0;

  // calulate shadow
  visibility = textureProj(shadowMap, vs_shadowCoord);

  output_colour = vec4((brightness * light.colour * diffuse.rgb) * visibility, diffuse.a);
}
